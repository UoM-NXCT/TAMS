-- dialect: postgresql

/*
 Create "user" table.
 Note: we put "user" in quote marks as user is a protected name.
 */

create table "user"
(
    user_id integer generated by default as identity
    constraint user_pk primary key,
    first_name text not null,
    last_name text not null,
    email_address text
);

comment on column "user".email_address is
'Treat emails as case-insensitive when performing comparisons.';

alter table "user"
owner to postgres;


/*
 Create project table.
 */

create table project
(
    project_id integer generated by default as identity
    constraint project_pk primary key,
    title text,
    project_type text,
    summary text,
    keyword text,
    start_date date,
    end_date date,
    directory_path text
);

comment on column project.directory_path is
'Note: is there a better way of storing a directory location?';

alter table project
owner to postgres;


/*
 Create instrument table.
 */

create table instrument
(
    instrument_id integer generated by default as identity
    constraint instrument_pk primary key,
    name text,
    status text
);

alter table instrument
owner to postgres;


/*
 Create project_user table.
 This allows for a many-to-many relationship between project and user.
 */

create table project_user
(
    user_id integer not null
    constraint project_user_user_null_fk references "user",
    project_id integer not null
    constraint project_user_project_null_fk references project
);

alter table project_user
owner to postgres;


/*
 Create sample table.
 */

create table sample
(
    sample_id integer generated by default as identity
    constraint sample_pk primary key,
    name text,
    size numeric,
    material text,
    confidentiality boolean default false not null
);

alter table sample
owner to postgres;


/*
 Create scan table.
 */

create table scan
(
    scan_id integer generated by default as identity
    constraint scan_pk primary key,
    scan_name text,
    voltage numeric,
    amperage numeric,
    exposure numeric,
    projections integer,
    voxel_size numeric,
    filter_thick text,
    filter_material text,
    projection_example bytea,
    source_sample_distance real,
    sample_detector_distance real,
    lens_type text,
    project_id integer not null
    constraint scan_project_null_fk references project,
    instrument_id integer not null
    constraint scan_instrument_null_fk references instrument
);

alter table scan
owner to postgres;


/*
 Create scan_sample table.
 This allows for a many-to-many relationship between scan and sample.
 */

create table scan_sample
(
    sample_id integer not null
    constraint scan_sample___fk references sample,
    scan_id integer not null
    constraint scan_sample_scan_null_fk references scan
);

alter table scan_sample
owner to postgres;


/*
 Create roles.
 */


/*
The admin role is used to manage the database. It has superuser privileges.
*/

create role admin inherit;
grant select on all tables in schema public to admin;
grant insert on all tables in schema public to admin;


/*
 The operator role has read-only access to the database.
 Users assigned a role of operator can only read data from the database unless they are
 explicitly granted write access to a table.
 */

create role operator inherit;
grant select on all tables in schema public to operator;
